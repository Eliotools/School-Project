#!/usr/bin/env python3
import sys
from math import *

def main():
    if (len(sys.argv) == 1):
        exit (84)
    if sys.argv[1] == "-h":
        print("USAGE\n    ./108trigo fun a0 a1 a2 ...\n\nDESCRIPTION\n    fun     function to be applied, among at least “EXP”, “COS”, “SIN”, “COSH”\n            and “SINH”\n    ai      coeficients of the matrix")
        exit (0)
    try :
        a = str(sys.argv[1])
        for i in range (len(sys.argv) - 2) :
            a = int(sys.argv[i+2])
    except :
        exit (84)
    if (is_a_float(sqrt(len(sys.argv)-2)) == 0) :
        a = matrice_filer((int(sqrt(len(sys.argv)-1))))
    if sys.argv[1] == "EXP" :
        exp(a, int((sqrt(len(sys.argv)-2))))
    if sys.argv[1] == "COS" :
        cos(a, int((sqrt(len(sys.argv)-2))))
    if sys.argv[1] == "SIN" :
        sin(a, int((sqrt(len(sys.argv)-2))))
    if sys.argv[1] == "COSH" :
        cosh(a, int((sqrt(len(sys.argv)-2))))
    if sys.argv[1] == "SINH" :
        sinh(a, int((sqrt(len(sys.argv)-2))))
    else :
            exit (84)
    

def exp (a, nb) :
    a = calcul(a, a, int(nb))
    for k in range (4) :
        a + sum(a, div(power(a, k, nb),dif(k), int(nb)), nb)
    print(a)
def cos (a, nb) :
    print("cos")
    print (a)
def sin (a, nb) :
    print("sin")
    print (a)
def cosh (a, nb) :
    print("cosh")
    print (a)
def sinh (a, nb) :
    print("sinh")
    print (a)
def is_a_float (nb) :
    test = int(nb)
    if test == nb :
        return(0)
    else :
        return (1) 
   
def sum (mat, amt, nb):
    for y in range (nb):
        for i in range (nb):
            mat[y][i] += amt[y][i]
    return (mat)


def div (amt, nb, size) :
    if nb == 0:
        return (0)
    for y in range (size):
        for i in range (size):
            amt[y][i] = int(amt[y][i])/int(nb)
    return (amt)

def dif (nb) :
    i = 1
    compte = 1
    while (compte <= nb) :
        i *= compte
        compte += 1
    if i == 0:
        return (1)
    return (i)

def power(mat, k, nb) :
    amt = mat
    for loop in range (k):
        amt = calcul(amt, mat, nb)
    return (amt)


def matrice_filer(nb) :
    x = 0
    y = 0
    a = [[0] * nb for i in range (nb)]
    for i in range (len(sys.argv)-2):
        a[x][y] = int(sys.argv[i+2])
        if y == nb-1 :
            y = 0
            x += 1
        else :
            y = y+1
    return (a)
    
def calcul (message, key, nb):
    amt = matrice_filer(nb)
    compte = 0
    a = 0
    chrono = 0
    hera = 0
    p = 0
    d = 0
    for i in  range (len(message)):
        for loop in range (nb):
            for j in range (nb):
                compte += int (message[a][d] * key[d][p])
                d += 1
            d = 0
            amt[hera][chrono] = compte
            if chrono < nb-1:
                chrono += 1
            elif hera < nb-1:
                hera += 1
                chrono = 0
            compte = 0
            p += 1
        d = 0
        p = 0
        compte = 0
        a += 1
    return (amt)


main()
