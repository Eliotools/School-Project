#!/usr/bin/env python3                                                                                               

import sys
from math import *

def main():
    if (len(sys.argv) != 8):
        exit(84)
    if (int(sys.argv[7]) < 1):
        exit(84)
    elif (sys.argv[1] == "-h"):
        hache()
    if (len(sys.argv) != 8):
        exit(84)
    try :
        for x in range (7):
            a = float(sys.argv[x+1])
    except :
        exit(84)
    if (int(sys.argv[1]) == 1):
        bij()
    elif (int(sys.argv[1]) == 2):
        Newton()
    elif (int(sys.argv[1]) == 3):
        secant()
    else:
        exit(84)

def secant():
    x = 0
    x1 = 1
    x2 = 0
    e = int(sys.argv[7])
    n = pow(10,-e)
    good = 0
    while (1):
        try:
            x2 = x - fonc(x) * ((x1 - x) / (fonc(x1) - fonc(x)))
        except:
            exit(84)
        x = x1
        x1 = x2
        if (good == 0):
            print("x =",x2)
            good = 1
        elif (good == 1):
            print("x = %0.*f" %(e, x2))    
        if (abs(fonc(x2)) < n):
            break

def bij():
    x = 1
    y = 0
    compte = 0
    e = int(sys.argv[7])
    n = pow(10,-e)
    while ((x - y) > n):
        compte += 1
        m = (y + x) / 2
        if (compte < e): 
            print("x =",m)
        else :
            print("x = %0.*f" %(e, m))
        if (fonc(y) * fonc(m) <= 0):
            x = m
        else :
            y = m

def Newton():
    x = 0.5
    good = 0
    count = 0
    n = int(sys.argv[7])
    while (abs(fonc(x)/deriv(x)) >= 10**-n and count <= 10):
        if (good == 0):
            print("x =",x)
            good = 1;    
        else :
            print("x = %0.*f"%(int(sys.argv[7]),x))
        x = x - fonc(x)/deriv(x)
        n += 1
    print("x = %0.*f"%(int(sys.argv[7]),x)) 

def fonc(x):
    try :
        a = (float(sys.argv[6])*pow(x,4)) + (float(sys.argv[5])*pow(x,3)) + (float(sys.argv[4])*pow(x,2)) + (float(sys.argv[3])*x) + (float(sys.argv[2]))
    except :
        exit(84)
    return(float(sys.argv[6])*pow(x,4)) + (float(sys.argv[5])*pow(x,3)) + (float(sys.argv[4])*pow(x,2)) + (float(sys.argv[3])*x) + (float(sys.argv[2]))

def deriv(x):
    a = (float(sys.argv[6])*(pow(x,3))*4) + (float(sys.argv[5])*(pow(x,2))*3) + (float(sys.argv[4])*x*2) + (float(sys.argv[3]))
    if (a != 0) :
        return (a)
    else :
        exit(84)

def hache():
    print("USAGE\n    ./105torus opt a0 a1 a2 a3 a4 n\n\nDESCRIPTION\n\
    opt\tmethod option:\n                    1 for the bisection method\n                    2 for Newton’s method\n                    3 for the secant method\n    a[0-4]    coefficients of the equation\n    n         precision (the application of the polynomial to the solution should be smaller than 10ˆ-n)")
    exit(0)
main()
