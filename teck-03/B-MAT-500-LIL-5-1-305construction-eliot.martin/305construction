#!/usr/bin/env python3

from sys import *
from os.path import exists

def main():
    if len(argv) == 1 or len(argv) > 2:
        exit(84)
    elif argv[1] == "-h":
        print("USAGE\n\t./305construction file\n\nDESCRIPTION\n\tfile    file describing the tasks")
    else:
        open_file(argv[1])
        findtime()
        final()

def open_file(name):
    
    if exists(name) :
        f = open(name, "r")
        tmp = f.read()
        tmp = tmp.split('\n')
        for line in tmp:
            if len(line) != 0 :
                line = line.split(';')
                if line[0] in dict :
                    exit(84)
                if len(line) < 4 :
                    array.append(line[0])
                dict[line[0]] = [line[1], int(line[2]), line[3:], 0,0,0]
    else :
        exit(84)

def algoPath(start, end, path=[]):
    path = path + [start]
    if start == end:
        return [path]
    if start not in dict:
        return []
    paths = []
    for node in dict[start][2]:
        if node not in path:
            newpaths = algoPath(node, end, path)
            for newpath in newpaths:
                paths.append(newpath)
    return paths
            
def newTask(task):
    length = 0
    paths = []
    for key in array:
        tmp = algoPath(task, key)
        if tmp: paths += tmp
    for path in paths:
        time = 0
        for loc in path[1:]:
            time+= dict[loc][1]
        tmp = time
        if tmp > length: length = tmp
    return length

def putFloat(time):
    for task in dict:
        next_time = time
        for current in dict:
            if task in dict[current][2] and next_time > dict[current][3]:
                next_time = dict[current][3]
        dict[task][5] = next_time - dict[task][4]

def findtime():
    time = 0
    for task in dict:
        dict[task][3] = newTask(task)
        dict[task][4] = dict[task][3] + dict[task][1]
        if (dict[task][4] > time):
            time = dict[task][4]
    putFloat(time)
    if (time <= 1):
        print("total duration of construction:", time,"week")
    else:
        print("total duration of construction:", time,"weeks")
    print()

def final():
    tmp = []
    for task in dict:
        tmp.append([task, dict[task][3], dict[task][1], dict[task][5]])
    tmp = sorted(tmp, key=lambda elem: (elem[1], elem[2], elem[3]))
    for elem in tmp:
        task = elem[0]
        if dict[task][5] > 0:
            print(task, "must begin between",
                  "t=" + str(dict[task][3]), "and",
                  "t=" + str(dict[task][3] + dict[task][5]))
        else:
            print(task, "must begin at" , "t=" + str(dict[task][3]))
    print()
    for task in tmp:
        print(task[0] + "\t" + "(" + str(dict[task[0]][5])
              + ")" + "\t" + str(" "*dict[task[0]][3])
              + str("="*dict[task[0]][1]))              

def print_array(array):

    for line in array:
        print(line)

array = []
dict = {}
main()