#!/usr/bin/env python3

import sys
from math import *
import math

def print_array(array):
    for line in array:
        for i in range(len(line)):
            if i == (len(line) - 1):
                print("{:g}".format(line[i]), end='\n')
            else:
                print("{:g}".format(line[i]), end='\t')

def construire_matrice(matrice, n, h):
    for i in range(n+1):
        matrice[i][i] = 1
    for i in range(n, n * n - n, n):
        for k in range(1, n - 1):
            matrice[i+k][k + (i - n)] = (1 / (h**2))
            matrice[i+k][i + k - 1] = (1 / (h**2))
            matrice[i+k][i+k] = -4 / (h**2)
            matrice[i+k][i + k + 1] = 1 / (h**2)
            matrice[i+k][n + i + k] = 1 / (h**2)
        
    
    # for i in range(n, n * n - n, n):
    #     for k in range(n):
    #         matrice[i][i + k] = 0
    #         matrice[i + (n - 1)][k] = 0
    #         matrice[i+k][i] = 0
    #         matrice[k][i + (n - 1)] = 0
    for i in range(n, n * n - n, n):
        matrice[i][i] = 1
        matrice[i + (n- 1)][i + (n- 1)] = 1

    for i in range(n * n - n, n*n, 1):
        matrice[i][i] = 1
    #print_array(matrice)
    return matrice
    

def construire_puissance(ir, jr, n):
    puissances = [0 for _ in range(n*n)]

    puissances[jr * n + ir] = -300

    return puissances

# def inverse_matrice(matrice, n):
#     copie = matrice.copy()
#     id = [[0 for _ in range(len(matrice))] for _ in range(len(matrice))]
#     for i in range(len(matrice)):
#         id[i][i] = 1

#     n = n*n
    
#     liste_colonne = []
#     for i in range(n):
#         j = 0
#         pivot = matrice[i][j]
#         while pivot == 0 or j in liste_colonne:
#             j = j + 1
#             pivot = matrice[i][j]
        
#         if pivot!= 1:
#             for k in range(n):
#                 matrice[i][k] = matrice[i][k] / pivot

#         pivot = matrice[i][j]
#         #print("pivot : " + str(pivot))
#         #print("colonne pivot: " + str(j))
        
#         liste_colonne.append(j)
#         coefs = [0 for _ in range(n)]

#         for k in range(n):
#             #print("dans boucle")
#             coefs[k] = -matrice[k][j] / pivot
#             #print(coefs)

#         coefs[j] = 0

#         for i2 in range(n):
#             for k in range(n):
#                 matrice[i2][k] = matrice[i2][k] + matrice[i][k] * coefs[i2]
#                 id[i2][k] = id[i2][k] + id[i][k] * coefs[i2]

    # print("first between")
    # print_array(matrice)
    # print("second between")
    # print_array(id)

    return id

def multiply_matrices(m1, m2):
    res = [0 for _ in range(len(m1[0]))]
    for i in range(len(m1)):
        for j in range(len(m1[0])):
            res[i] = res[i] + m1[i][j] * m2[j]

    return res
    
def recuperer_temperature(i, j, n, temperature):
    return temperature[j * n + i]


def eliminate(r1, r2, col, target=0):
    fac = (r2[col]-target) / r1[col]
    for i in range(len(r2)):
        r2[i] -= fac * r1[i]

def gauss(a):
    for i in range(len(a)):
        if a[i][i] == 0:
            for j in range(i+1, len(a)):
                if a[i][j] != 0:
                    a[i], a[j] = a[j], a[i]
                    break
            else:
                raise ValueError("Matrix is not invertible")
        for j in range(i+1, len(a)):
            eliminate(a[i], a[j], i)
    for i in range(len(a)-1, -1, -1):
        for j in range(i-1, -1, -1):
            eliminate(a[i], a[j], i)
    for i in range(len(a)):
        eliminate(a[i], a[i], i, target=1)
    return a

def inverse(a):
    tmp = [[] for _ in a]
    for i,row in enumerate(a):
        assert len(row) == len(a)
        tmp[i].extend(row + [0]*i + [1] + [0]*(len(a)-i-1))
    gauss(tmp)
    ret = []
    for i in range(len(tmp)):
        ret.append(tmp[i][len(tmp[i])//2:])
    return ret

def main():
    if (len(sys.argv) == 2):
        if (sys.argv[1] == "-h"):
            print("./306radiator n ir jr [i j]\n\n\
DESCRIPTION\n \
\tn\tfile describing the tasks\n\
\t(ir, jr)\tcoordinates of the radiator\n\
\t(i, j)\tcoordinates of a point in the room")
            sys.exit(0)
    check_argv()
    if (len(sys.argv) != 6 and len(sys.argv) != 4):
        sys.exit(84)

    try:
        n = int(sys.argv[1])
        ir = int(sys.argv[2])
        jr = int(sys.argv[3])
    except:
        sys.exit(84)
    h = 0.5
    matrice = [[0 for _ in range(n * n)] for _ in range(n * n)]
    construire_matrice(matrice, n, h)
    inversema = inverse(matrice)
    #print(inversema)
    puissances = construire_puissance(ir, jr, n)
    #print(puissances)
    temperature = multiply_matrices(inversema, puissances)
    if (len(sys.argv) == 4):
        print_array(matrice)
        print()
        for tem in temperature:
            print(round(tem, 1))

    if len(sys.argv) == 6:
        try:
            i = int(sys.argv[4])
            j = int(sys.argv[5])
        except:
            sys.exit(84)
        print(round(recuperer_temperature(i, j, n, temperature), 1))


def check_argv():
    for i in range (1, len(sys.argv)) :
        try :
            tmp = int(sys.argv[i])
            if (tmp < 0):
                exit(84)
        except :
            exit(84)

main()